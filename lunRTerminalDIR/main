--- lunRTerminal 1.4.3 ---
rednet.open("back")
local version = "lunRTerminal Build 1.4.3"
local versionLinkID = "https://raw.githubusercontent.com/RexxuDesu/lunRCC/refs/heads/main/lunRTerminalDIR/version.txt"
local scriptLinkID = "https://raw.githubusercontent.com/RexxuDesu/lunRCC/refs/heads/main/lunRTerminalDIR/main"
local scriptBetaPastebinID = "4Un6bMrt"
local versionFile = "version.txt"
local promptColor = colors.lime
local errorColor = colors.red
local successColor = colors.green
local goldColor = colors.yellow
local infoColor = colors.cyan
local idPath = fs.open("id.txt", "r")
local userPath = fs.open("user.txt", "r")
local serverID = idPath.readLine()
local user = userPath.readLine()
if serverID ~= nil and serverID:gsub("%s", "") ~= "" then
else
    idPath = fs.open("id.txt", "w")
    term.setTextColor(promptColor)
    io.write("Enter server ID: ")
    term.setTextColor(colors.white)
    local input = read()
    idPath.write(input)
    idPath = fs.open("id.txt", "r")
    serverID = idPath.readLine()
    serverID = tonumber(serverID)
    idPath.close()
end

if user ~= nil and user:gsub("%s", "") ~= "" then
else
    userPath = fs.open("user.txt", "w")
    user = "user"
    userPath.write(user)
    userPath = fs.open("user.txt", "r")
    userPath.close()
end

local function update()
    print("[sudo] Checking for updates...")
    local success, err = shell.run("pastebin get " .. versionLinkID .. " " .. versionFile)
    if not success then
		term.setTextColor(errorColor)
        print("[sudo] Failed to fetch version information from Pastebin:", err)
		term.setTextColor(colors.white)
    end
    if fs.exists(versionFile) then
        local file = fs.open(versionFile, "r")
        if file then
            local latestVersion = file.readLine()
            file.close()
            fs.delete(versionFile)
            latestVersion = latestVersion:match("^%s*(.-)%s*$")
            version = version:match("^%s*(.-)%s*$")
            if latestVersion and latestVersion ~= version then
                print("[sudo] Latest version available: " .. latestVersion)
                print("[sudo] Current installed version: " .. version)
				term.setTextColor(successColor)
                io.write("[sudo] Do you want to proceed with the update? (y/n): ")
				term.setTextColor(colors.white)
                local proceed = read()
                if proceed:lower() == "y" then
                    print("[sudo] Updating...")
                    shell.run("rm startup")
                    local success, err = shell.run("pastebin get " .. scriptLinkID .. " startup")
                    if success then
                        version = latestVersion
						term.setTextColor(successColor)
                        print("[sudo] Script updated to version " .. latestVersion)
						term.setTextColor(colors.white)
                        return
                        shell.run("startup")
                    else
						term.setTextColor(errorColor)
                        print("[sudo] Failed to update script:", err)
						term.setTextColor(colors.white)
                    end
                else
					term.setTextColor(errorColor)
                    print("[sudo] Update aborted.")
					term.setTextColor(colors.white)
                end
            else
				term.setTextColor(successColor)
                print("[sudo] No updates available. You are running the latest version.")
				term.setTextColor(colors.white)
            end
        else
			term.setTextColor(errorColor)
            print("[sudo] Failed to open version file for reading.")
			term.setTextColor(colors.white)
        end
    else
        print("[sudo] Version file does not exist.")
    end
end

local function updateForce()
	term.setTextColor(errorColor)
    print("[sudo] Are you sure you want to force update? (y/n): ")
	term.setTextColor(colors.white)
    local proceed = read():lower()
    if proceed == "y" then
        print("[sudo] Force updating...")
        shell.run("rm startup")
        local success, err = shell.run("pastebin get " .. scriptLinkID .. " startup")
        if success then
            term.setTextColor(successColor)
            print("[sudo] Force update successful.")
            term.setTextColor(colors.white)
            return
            shell.run("startup")
        else
            term.setTextColor(errorColor)
            print("[sudo] Failed to force update:", err)
            term.setTextColor(colors.white)
        end
    else
		term.setTextColor(errorColor)
        print("[sudo] Force update aborted.")
		term.setTextColor(colors.white)
    end
end

local function betaUpdate()
	term.setTextColor(errorColor)
    print("[sudo] Are you sure you want to enter beta prod? (y/n): ")
	term.setTextColor(colors.white)
    local proceed = read():lower()
    if proceed == "y" then
        print("[sudo] Force updating...")
        shell.run("rm startup")
        local success, err = shell.run("pastebin get " .. scriptBetaPastebinID .. " startup")
        if success then
            term.setTextColor(successColor)
            print("[sudo] Force update successful.")
            term.setTextColor(colors.white)
            return
            shell.run("startup")
        else
            term.setTextColor(errorColor)
            print("[sudo] Failed to force update:", err)
            term.setTextColor(colors.white)
        end
    else
		term.setTextColor(errorColor)
        print("[sudo] Force update aborted.")
		term.setTextColor(colors.white)
    end
end

local function changeUser()
    if user ~= nil and user:gsub("%s", "") ~= "" then
        userPath = fs.open("user.txt", "w")
        term.setTextColor(promptColor)
        io.write("Enter new username: ")
        term.setTextColor(colors.white)
        local inputFUser = read()
        userPath.write(inputFUser)
        userPath = fs.open("user.txt", "r")
        user = userPath.readLine()
        userPath.close()
    end
end

local function changeServer()
    if serverID ~= nil and serverID:gsub("%s", "") ~= "" then
        idPath = fs.open("id.txt", "w")
        term.setTextColor(promptColor)
        io.write("Enter new server ID: ")
        term.setTextColor(colors.white)
        local input = read()
        idPath.write(input)
        idPath = fs.open("id.txt", "r")
        serverID = idPath.readLine()
        serverID = tonumber(serverID)
        idPath.close()
    end
end

serverID = tonumber(serverID)

local function inputRead()
    while true do
        io.write(user .. "@:~$ ")
        term.setTextColor(colors.white)
        local command = read()
        if command == "help" then
            print("soon")
        elseif command == "apt upd" then
            update()
        elseif command == "apt -f upd" then
            updateForce()
        elseif command == "apt -b upd" then
            betaUpdate()
        elseif command == "restart" then
            shell.run("clear")
            return
            shell.run("startup")
        elseif command == "exit" then
            shell.run("exit")
		elseif command == "clear" then
			shell.run("clear")
		elseif command == "version" then
			term.setTextColor(goldColor)
			print(version)
			term.setTextColor(colors.white)
        elseif command == "changeUser" then
            changeUser()
        elseif command == "changeServer" then
            changeServer()
        elseif command == "m1" then
            rednet.send(serverID, "m0")
        elseif command == "m2" then
            rednet.send(serverID, "m1")
        elseif command == "m3" then
            rednet.send(serverID, "m2")
        elseif command == "m4" then
            rednet.send(serverID, "m3")
        elseif command == "m5" then
            rednet.send(serverID, "m4")
        elseif command == "m6" then
            rednet.send(serverID, "m5")
        elseif command == "m7" then
            rednet.send(serverID, "m6")
        elseif command == "m8" then
            rednet.send(serverID, "m7")
		elseif command == "s1" then
			rednet.send(serverID, "s0")
		elseif command == "s2" then
			rednet.send(serverID, "s1")
		elseif command == "s3" then
			rednet.send(serverID, "s2")
		elseif command == "status" then
			rednet.send(serverID, "stat")
        else
            term.setTextColor(errorColor)
            print("Unknown command: " .. command)
            term.setTextColor(colors.white)
        end
    end
end
 
local function receiveListen()
    while true do
        local id, packet = rednet.receive()
        if id == serverID then
            if packet == "vaultFull_0" then
                term.setTextColor(errorColor)
                print("\n[warning] Storage buffer is full.")
                term.setTextColor(colors.white)
                io.write(user .. "@:~$ ")
            elseif packet == "vaultEmpty_0" then
                term.setTextColor(successColor)
                print("\n[warning] Storage buffer is cleared.")
                term.setTextColor(colors.white)
                io.write(user .. "@:~$ ")
            elseif packet == "engineFail_0" then
                term.setTextColor(errorColor)
                print("\n[warning] Ship's engine has stopped, please restart.")
                term.setTextColor(colors.white)
                io.write(user .. "@:~$ ")
            elseif packet == "stat0" then
                id, packet = rednet.receive()
                print(packet)
            elseif packet == "stat1" then
                io.write(user .. "@:~$ ")
            end
		end
	end
end
 
parallel.waitForAny(inputRead, receiveListen)
